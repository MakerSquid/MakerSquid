/*************************************************************************
$Id$

Bersirc - A cross platform IRC client utilizing the Claro GUI Toolkit.
Copyright (C) 2004-2005 Theo P. Julienne and Nicholas S. Copeland

This application is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This application is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this application; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

#include "includes.h"

CWidget *mainwin=0, *childwin, *texttest, *btvtest, *menu, *workspace, *aligner, *toolbar;
CWidget *toolbar;

#define APPTITLE "Bersirc IRC Client " BERSIRC_VERSION

int itter = 0;

void bersirc_mainloop_it( void )
{
	c_socket_run( );
	
	b_servers_run( );
}

XMLFile *config;
XMLItem *xidentity;
char identity[1024];
extern int savedprofile;
char filepath[4096];

typedef struct
{
	char *name;
	ClaroIcon *icon;
} BersircIcon;

BersircIcon bicons[] = {
	{ "bersirc", 0 },
	{ "connect", 0 },
	{ "disconnect", 0 },
	{ "network_browser", 0 },
	{ "profile_man", 0 },
	{ "channel_window", 0 },
	{ "query_window", 0 },
	{ "status_window", 0 },
	{ "url_catcher", 0 },
	{ "casc_windows", 0 },
	{ "tile_windows", 0 },
	{ "options", 0 },
	{ "tile_vertical", 0 },
	{ "channels", 0 },
	{ "time", 0 },
	{ "quitirc", 0 },
	{ "closewin", 0 },
	{ "add_fav", 0 },
	{ "cycle", 0 },
	{ "channel_props", 0 },
	{ "connect_inp", 0 },
	{ 0, 0 },
};

ClaroIcon *b_icon( char *name )
{
	int a;
	char tmp[256];
	
	for ( a = 0; bicons[a].name != 0; a++ )
	{
		if ( !strcasecmp( bicons[a].name, name ) )
		{
			if ( bicons[a].icon == 0 )
			{
				sprintf( tmp, "themes/default/icons/%s.xpm", name );
				bicons[a].icon = c_icon_from_xpm( tmp );
			}
			
			return bicons[a].icon;
		}
	}
	
	return 0;
}

typedef struct bfav
{
	CMenuItem *menuitem;
	XMLItem *xmlitem;
	
	struct bfav *next;
} BersircFavorite;

BersircFavorite *favs_head=0;

void b_store_favorite( CMenuItem *m, XMLItem *x )
{
	BersircFavorite *fav;
	
	if ( !( fav = malloc( sizeof( BersircFavorite ) ) ) )
		return;
	
	fav->menuitem = m;
	fav->xmlitem = x;
	fav->next = favs_head;
	favs_head = fav;
}

void b_favorite_clicked( CMenuItem *m )
{
	BersircFavorite *curr;
	char *server, *port, *place, *pass;
	int iport;
	BServerWindow *sw;
	BChatWindow *cw;
	
	for ( curr = favs_head; curr != 0; curr = curr->next )
	{
		if ( curr->menuitem == m )
		{
			server = c_xml_attrib_get( curr->xmlitem, "server" );
			port = c_xml_attrib_get( curr->xmlitem, "port" );
			pass = c_xml_attrib_get( curr->xmlitem, "password" );
			place = c_xml_attrib_get( curr->xmlitem, "place" );
			
			if ( server == 0 || place == 0 )
				return;
			
			if ( port == 0 )
				port = "6667";
			
			if ( pass == 0 )
				pass = "";
			
			iport = atoi( port );
			
			sw = b_find_server_by_sname( server, 1 );
			cw = 0;
			
			if ( sw == 0 )
			{
				sw = b_find_server_by_sname( server, 0 );
				
				if ( sw == 0 )
				{
					// look for disconnected one
					sw = b_find_server_by_conn( 0 );
					
					if ( sw == 0 )
					{
						// open new server window!
						sw = b_new_server_window( 0 );
					}
				}
				
				// tell sw where to go after connect
				b_server_onconnect_goto( sw, place );
				
				// set password
				strcpy( sw->password, pass );
				
				// connect sw to server
				b_server_connect( sw, server, iport );
			}
			else
			{
				// server window open.
				
				cw = b_find_chat_by_dest( sw, place );
				
				if ( cw == 0 )
				{
					// open new chat window
					if ( place[0] == '#' || place[0] == '&' )
						b_server_printf( sw, "JOIN %s", place );
					else
						cw = b_new_chat_window( sw, place, 0 );
				}
				
				if ( cw != 0 )
					c_widget_focus( cw->input );
			}
		}
	}
}

void menu_setup_favorites( CMenuItem *fav, XMLItem *head )
{
	XMLItem *curr;
	CMenuItem *newi;
	ClaroIcon *icon;
	char *place;
	
	if ( head == 0 || head->child_head == 0 )
		return; // FIXME: do something else than leave an empty menu

	for ( curr = head->child_head; curr != 0; curr = curr->next ) {
		if ( !strcasecmp( curr->name, "directory" ) )
		{
			newi = c_menubar_add_item_text( menu, fav, c_xml_attrib_get( curr, "name" ) );
			menu_setup_favorites( newi, curr );
		}
		else if ( !strcasecmp( curr->name, "bookmark" ) )
		{
			icon = b_icon( "channel_window" );
			
			place = c_xml_attrib_get( curr, "place" );
			if ( place != 0 && place[0] != '#' && place[0] != '&' )
				icon = b_icon( "query_window" );
			
			newi = c_menubar_add_item_text_icon( menu, fav, c_xml_attrib_get( curr, "name" ), icon );
			b_store_favorite( newi, curr );
			c_menubar_attach( newi, &b_favorite_clicked );
		}
	}
}

void b_plugins_load( )
{
	XMLItem *item;
	char tmp[1024];
	char *env = "so";
	
#ifdef ENV_WIN32
	env = "dll";
#endif
#ifdef ENV_CARBON
	env = "dylib";
#endif
	
	item = c_xml_find_child( xidentity, "plugins" );
	
	if ( item == 0 )
		return;
	
	for ( item = item->child_head; item != 0; item = item->next )
	{
		if ( !strcasecmp( item->name, "plugin" ) )
		{
			sprintf( tmp, "plugins/%s.%s", c_xml_attrib_get( item, "name" ), env );
			b_plugin_load( tmp );
		}
	}
}

void do_x_click( int *wintype, char *cmd )
{	
	if ( cmd == 0 )
		return;
	
	if ( wintype == 0 )
	{
		b_user_command( 0, cmd, 2 );
		return;
	}
	
	if ( *wintype == B_CMD_WINDOW_STATUS )
		b_user_command( (BServerWindow *)wintype, cmd, 0 );
	else if ( *wintype & B_CMD_WINDOW_CHAT )
		b_user_command( (BChatWindow *)wintype, cmd, 1 );
}

void menu_x_click( CMenuItem *i )
{
	int *wintype = 0;//(int *)b_active_window( );
	
	// see if we can find which window the menu belongs to
	if ( ( wintype = (int *)b_find_server_by_widget( i->widget ) ) == NULL )
	{
		wintype = (int *)b_find_chat_by_widget( i->widget );
	}
	
	if ( wintype == 0 )
		wintype = (int *)b_active_window( );
	
	do_x_click( wintype, i->appdata );
}

void tool_x_click( CToolItem *i )
{
	int *wintype = (int *)b_active_window( );
	do_x_click( wintype, i->appdata );
}

void b_menu_from_xml_item( XMLItem *i, CWidget *menu, CMenuItem *parent, int type )
{
	XMLItem *curr;
	CMenuItem *m_new;
	CToolItem *t_new;
	ClaroIcon *icon;
	char *icon_n;
	char *item_n;
	char *enable;
	char *command;
	char *init;
	XMLItem *favlist;
	
	for ( curr = i->child_head; curr != 0; curr = curr->next )
	{
		icon = 0;
		
		if ( ( item_n = c_xml_attrib_get( curr, "title" ) ) == 0 )
			continue; // can't do anything about this one
		
		if ( !strcasecmp( item_n, "-" ) )
		{
			// separator
			if ( type == 0 )
				c_menubar_add_separator( menu, parent );
			else
				c_toolbar_add_item( toolbar, 0, 0 );
			continue;
		}
		
		// icon?
		if ( ( icon_n = c_xml_attrib_get( curr, "icon" ) ) != 0 )
			icon = b_icon( icon_n );
		
		// title, is it a language element?
		if ( lang_str_overlap( item_n, "lang:" ) == 5 )
			item_n = lang_phrase_quick( item_n + 5 );
		
		if ( type == 0 )
		{
			m_new = c_menubar_add_item_text_icon( menu, parent, item_n, icon );
			
			if ( ( enable = c_xml_attrib_get( curr, "enabled" ) ) != 0 )
			{
				// disabled?
				if ( !strcasecmp( enable, "false" ) )
					c_menubar_disable_item( menu, m_new );
			}
			
			if ( ( command = c_xml_attrib_get( curr, "command" ) ) != 0 )
			{
				m_new->appdata = command;
				c_menubar_attach( m_new, &menu_x_click );
			}
			
			if ( ( init = c_xml_attrib_get( curr, "init" ) ) != 0 )
			{
				if ( !strcasecmp( init, "menu_setup_favorites" ) )
				{
					favlist = c_xml_find_child( xidentity, "favorites" );
					menu_setup_favorites( m_new, favlist );
				}
			}
			
			b_menu_from_xml_item( curr, menu, m_new, 0 );
		}
		else
		{
			t_new = c_toolbar_add_item( menu, icon, 0 /*menu*/ );
			
			if ( item_n != 0 )
				strcpy( t_new->tooltip, item_n );
			
			if ( ( command = c_xml_attrib_get( curr, "command" ) ) != 0 )
			{
				t_new->appdata = command;
				c_toolbar_attach( t_new, &tool_x_click );
			}
			// we always recurse with a menu, toolbars are not toolbars in sub items
			//b_menu_from_xml_item( curr, menu, m_new, 0 );
			// but toolbar menus are not coded yet, so leave this out for now...
		}
	}
}

void b_menu_from_xml( XMLFile *xfile, CWidget *menu, char *name, int type )
{
	XMLItem *bers, *curr;
	char *cname;
	
	bers = c_xml_get_path( xfile, "Bersirc" );
	
	if ( bers == 0 )
		return;
	
	for ( curr = bers->child_head; curr != 0; curr = curr->next )
	{
		if ( strcasecmp( curr->name, "menu" ) )
			continue; // not a <menu>
		
		if ( ( cname = c_xml_attrib_get( curr, "name" ) ) == 0 )
			continue; 
		
		if ( strcasecmp( name, cname ) )
			continue;
		
		// this is our menu
		b_menu_from_xml_item( curr, menu, 0, type );
		
		return;
	}
}

void b_insert_systray( );
void b_remove_systray( );

XMLFile *xmenu;
int mw_state_x, mw_state_y, mw_state_w, mw_state_h, mw_state_max, mw_state_min;

void state_changed( CEvent *e, void *data )
{
	if ( e->id == C_EVENT_MINIMIZED )
	{
		mw_state_min = 1;
		if ( b_get_option_bool( xidentity, "general", "opt_gen_min_to_systray" ) )
		{
			b_insert_systray( );
			c_widget_hide( mainwin );
		}
	}
	else if ( e->id == C_EVENT_MAXIMIZED )
	{
		mw_state_max = 1;
		mw_state_min = 0;
	}
	else if ( e->id == C_EVENT_RESTORED )
	{
		mw_state_max = 0;
		mw_state_min = 0;
	}
	else
	{
		if ( e->caller->info->x > 0 || e->caller->info->y > 0 )
		{
			mw_state_x = e->caller->info->x;
			mw_state_y = e->caller->info->y;
			mw_state_w = e->caller->info->width;
			mw_state_h = e->caller->info->height;
		}
	}
	
	if ( mw_state_min == 0 )
	{
		if ( !b_get_option_bool( xidentity, "general", "opt_gen_show_in_systray" ) )
			b_remove_systray( );
	}
}

CWidget *bersirc_systray_icon = 0;
CWidget *bersirc_systray_popup = 0;
ClaroIcon *bersirc_icon;

void b_restore_me( )
{
	int was_maxed = mw_state_max;
	
	// show the window
	c_widget_show( mainwin );
	
	if ( was_maxed )
		c_widget_maximize( mainwin );// maximize it again if it was maximised
	else
		c_widget_restore( mainwin ); // otherwise, restore it
	
	c_widget_focus( mainwin );
}

void b_systray_dblclicked( CEvent *e, void *data )
{
	b_restore_me( );
}

void b_systray_rclicked( CEvent *e, void *data )
{
	int *pos = (int *)data;
	
	if ( bersirc_systray_popup != 0 )
		c_menubar_popup( bersirc_systray_popup, pos[0], pos[1] );
}

void b_insert_systray( )
{
	if ( bersirc_systray_icon != 0 )
		return; // don't add twice.
	
	if ( bersirc_systray_popup == 0 )
	{
		bersirc_systray_popup = c_new_menubar( mainwin, C_MENU_POPUP );
	
		b_menu_from_xml( xmenu, bersirc_systray_popup, "context-systray", 0 );
	}
	
	// create systray icon widget
	bersirc_systray_icon = c_new_systrayicon( mainwin, "Bersirc", bersirc_icon, 0 );
	c_new_event_handler( bersirc_systray_icon, C_EVENT_MOUSE_LEFT_DBLCLK, b_systray_dblclicked );
	c_new_event_handler( bersirc_systray_icon, C_EVENT_MOUSE_RIGHT_CLICK, b_systray_rclicked );
}

void b_remove_systray( )
{
	if ( bersirc_systray_icon == 0 )
		return; // don't delete if not shown twice.
	
	// create systray icon widget
	c_destroy_widget( bersirc_systray_icon, 1 );
	
	bersirc_systray_icon = 0;
}

int main( int argc, char *argv[] )
{
	char *realname, *username;
	XMLItem *nicks;
	BServerWindow *sw;
	int x, y, w, h, f;

	// Move the CWD so we're in the path of the executable if we started elsewhere
	char path[1024];
	char *tmp;
	strcpy( path, argv[0] );
	tmp = strrchr( path, '/' );
	if ( tmp != NULL )
	{
		printf( "%s\n", path );
		*tmp = 0;
		printf( "%s\n", path );
		if ( strcmp( path, "" ) )
			chdir( path );
	}
	else
	{
		tmp = strrchr( path, '\\' );
		if ( tmp != NULL )
		{
			printf( "%s\n", path );
			*tmp = 0;
			printf( "%s\n", path );
			if ( strcmp( path, "" ) )
				chdir( path );
		}
	}

	// FIXME: User should be able to select the identity within the current user XML file ?
	strcpy( identity, "Default" );
	
	// Initialise Claro
	c_init ( APPTITLE, 0 ); // first! :)
	
	// Sort out the user directory
	config_userdir_init( );
	
	// Load the Bersirc icon
	bersirc_icon = c_icon_from_xpm( "icons/bersirc.xpm" );
	
	// Create XML parser and load prefs.xml (or the default if prefs.xml doesn't exist)
	config = c_xml_create( );
	
	sprintf( filepath, "%s/prefs.xml", userdir );
	
	if ( c_xml_load_file( config, filepath ) == 0 )
		c_xml_load_file( config, "xml/user-default.xml" );
	
	// Dump the XML parser back to prefs.xml, now it WILL exist
	c_xml_dump_file( config, filepath );
		
	// FIXME: identity should be loaded based on name and default.
	xidentity = c_xml_get_path( config, "Bersirc.identities.identity" );
	
	if ( xidentity == 0 )
	{
		printf( "Could not find Bersirc.identities.identity in user XML file. Bailing out\n" );
		return 0;
	}
	
	// Load our primary language (backup is always EN-UK)
	lang_init( b_get_option_string( xidentity, "general", "opt_gen_language" ) );
	
	// find the username, realname and nicks settings
	username = c_xml_attrib_get( xidentity, "username" );
	realname = c_xml_attrib_get( xidentity, "realname" );
	nicks = c_xml_find_child( xidentity, "nicks" );
	
	// make sure they are set
	if ( username == 0 || realname == 0 || !strcmp( username, "" ) || !strcmp( realname, "" ) || nicks == 0 || nicks->child_head == 0 )
	{
		// otherwise, open the profile window
		mainwin = 0;
		
		b_open_profile( );
		c_mainloop( );
		
		if ( savedprofile == 0 )
			return 0;
	}
	
	// Initialise the commands
	b_init_commands( );
	
	// Add Bersirc's (socket and other) proccessing to the loop
	c_add_mainloop( (int (*)())bersirc_mainloop_it );
	
	// Create the main Bersirc window and set it's icon
	// Use saved state data
	
	x = b_get_option_int( xidentity, "state", "main_x" );
	y = b_get_option_int( xidentity, "state", "main_y" );
	w = b_get_option_int( xidentity, "state", "main_width" );
	h = b_get_option_int( xidentity, "state", "main_height" );
	f = 0;
	
	mw_state_x = x;
	mw_state_y = y;
	mw_state_w = w;
	mw_state_h = h;
	mw_state_max = b_get_option_bool( xidentity, "state", "main_maximise" );
	mw_state_min = b_get_option_bool( xidentity, "state", "main_minimise" );
	
	if ( mw_state_max == 1 )
		f = C_START_MAXIMISE;
	/*
	if ( mw_state_min == 1 )
		f = C_START_MINIMISE;
	*/
	mainwin = c_new_window( 0, APPTITLE, w, h, f );
	c_window_set_icon( mainwin, bersirc_icon );
	
	c_widget_move_info( mainwin, x, y, w, h );
	
	// Set up event handlers
	c_new_event_handler( mainwin, C_EVENT_MINIMIZED, state_changed );
	c_new_event_handler( mainwin, C_EVENT_MAXIMIZED, state_changed );
	c_new_event_handler( mainwin, C_EVENT_RESTORED, state_changed );
	c_new_event_handler( mainwin, C_EVENT_RESIZE, state_changed );
	c_new_event_handler( mainwin, C_EVENT_MOVE, state_changed );
	
	// Give the window a sane minimum size
	c_window_minsize( mainwin, 300, 200 );
	
	// Load the default menu XML file
	xmenu = c_xml_create( );
	c_xml_load_file( xmenu, "xml/menus-default.xml" );
	
	if ( b_get_option_bool( xidentity, "general", "opt_gen_show_in_systray" ) )
		b_insert_systray( );
	
	// Create and load the toolbar
	toolbar = c_new_toolbar( mainwin, 0 );
	b_menu_from_xml( xmenu, toolbar, "toolbar", 1 );
	
	// Create and load the menu
	menu = c_new_menubar( mainwin, 0 );
	b_menu_from_xml( xmenu, menu, "application", 0 );
	
	// Create the aligner for workspace and taskbar
	aligner = c_new_aligner( mainwin, C_ALIGNER_VERTICAL );
	
	// Workspace
	workspace = c_new_workspace( aligner, 0, 0, 100, 100, 0 );
	
	// Task bar
	b_create_taskbar( aligner );
	
	// Make the workspace stretch
	c_aligner_set_stretchable_child( aligner, workspace );
	
	// Docking window "Server list"
	/*
	CWidget *docktest;
	docktest = c_new_window( workspace, "Server List", 180, 400, C_WINDOW_CAN_DOCK );
	c_workspace_dock( workspace,docktest, C_DOCK_LEFT );
	c_new_pushbutton( docktest, "Hello, World", 0, 0, 180, 100, 0 );
	*/
	
	// Status bar
	c_new_statusbar( mainwin, "", 0 );
	
	// Create the first status window
	sw = b_new_server_window( 1 );
	
	// Load the plugins (status window needs to be open just incase there are errors)
	b_plugins_load( );
	
	// Init DCC GUI data
	b_dcc_gui_init( );
	
	// Init AutoWin GUI data
	b_autowin_gui_init( );
	
	// Run auto-connect
	b_autowin_run( sw );
	
	// Go into the loop!
	c_mainloop( );
	
	// loop ended, clean up claro stuff
	c_cleanup( );
	
	// Save state
	b_set_option_int( xidentity, "state", "main_x", mw_state_x );
	b_set_option_int( xidentity, "state", "main_y", mw_state_y );
	b_set_option_int( xidentity, "state", "main_width", mw_state_w );
	b_set_option_int( xidentity, "state", "main_height", mw_state_h );
	b_set_option_bool( xidentity, "state", "main_maximise", mw_state_max );
	b_set_option_bool( xidentity, "state", "main_minimise", mw_state_min );
	
	// Save preferences!
	c_xml_dump_file( config, filepath );
	
	return 0;
}
