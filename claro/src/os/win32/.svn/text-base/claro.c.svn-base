/*************************************************************************
$Id$

Claro - A cross platform GUI toolkit which "makes sense".
Copyright (C) 2004 Theo Julienne and Gian Perrone

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

#include "../../../include/includes.h"

#ifndef ENV_WIN32
#error "Somehow the win32 claro.c was included while the environment was not ENV_WIN32"
#endif

void c_win32_reset_info( CWidget *w );

CWidget *c_get_window_by_handle( CWidget *from, HWND win, int sect )
{
	CWidget *c;
	CWidget *a;
	
	if ( from == 0 )
		return 0;
	
	for ( c = from->child_head; c != 0; c = c->next ) {
		if ( c->freeze_destroy == 1 )
			continue;
		
		if ( sect == 1 )
		{
			if ( (HWND)((CWindowWidgetInfo *)c->info)->clientwin == win )
				return c;
		}
		else
		{
			if ( c->info->widget == win && c->info->type != CLARO_WIDGET_ALIGNER )
				return c;
		}
		
		a = c_get_window_by_handle( c, win, sect );
		if ( a != 0 )
			return a;
	}
	
	return 0;
}

// this function calls the appropriate Def*Proc function for this window.
LRESULT CALLBACK c_default_win32_proc( CWidget *w, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
	int flags;
	
	if ( w == 0 )
		return 0;
	
	flags = w->info->flags;
	
	if ( flags & C_MDICHILD )
		return DefMDIChildProc( hWnd, uMsg, wParam, lParam );
	else if ( flags & C_MDIPARENT )
		return DefFrameProc( hWnd, (HWND)((CWindowWidgetInfo *)w->info)->clientwin, uMsg, wParam, lParam );
	else
		return DefWindowProc( hWnd, uMsg, wParam, lParam );
}

int z = 0;

void c_recurse_check_menu_onclick( CWidget *cw, CMenuItem *mi, int mid )
{
	CMenuItem *curr;
	
	if ( mi->id == mid )
	{
		if ( mi->onclick != 0 )
			(*mi->onclick)( mi );
	}
	else if ( mi->hassubs == 1 )
	{
		for ( curr = mi->items; curr != 0; curr = curr->next )
		{
			c_recurse_check_menu_onclick( cw, curr, mid );
		}
	}
}

CMenuItem *c_recurse_get_menuitem( CMenuItem *mi, int mid )
{
	CMenuItem *curr, *r;
	
	if ( mi->id == mid )
	{
		return mi;
	}
	
	if ( mi->hassubs == 1 )
	{
		for ( curr = mi->items; curr != 0; curr = curr->next )
		{
			r = c_recurse_get_menuitem( curr, mid );
			
			if ( r != 0 )
				return r;
		}
	}
	
	return 0;
}

int c_win32_check_special_msg( CWidget *w, PMSG msg )
{
	CWidget *pw = w;
	int ret = 0;
	int dlggo = 1;
	
	while ( pw->parent != 0 )
	{
		if ( pw->info->type == CLARO_WIDGET_WINDOW )
		{
			if ( !( pw->info->flags & C_MDICHILD ) )
				break;
		}
		
		pw = pw->parent;
	}
	
	if ( w->info->type == CLARO_WIDGET_TEXTBOX )
	{
		if ( msg->message == WM_KEYDOWN )
		{
			if ( msg->wParam == VK_RETURN )
			{
				if ( c_find_handler( C_EVENT_TEXT_ENTER, w->handlers ) != 0 )
				{
					c_send_event( w, C_EVENT_TEXT_ENTER, 0 );
					dlggo = 0;
				}
				ret = 1;
			}
		}
	}
	
	if ( w->info->type != CLARO_WIDGET_WINDOW )
	{
		// catch size and move events and update widget info items
		switch ( msg->message )
		{
			case WM_SIZE:
			case WM_MOVE:
				c_win32_reset_info( w );
				break;
		}
	}
	
	if ( msg->message == WM_KEYDOWN )
	{
		if ( pw->info->type == CLARO_WIDGET_WINDOW && pw->info->flags & C_DIALOG )
		{
			if ( msg->wParam == VK_ESCAPE )
			{
				c_widget_close( pw );
				ret = 1;
			}
			else if ( msg->wParam == VK_RETURN && dlggo == 1 && w->info->type != CLARO_WIDGET_BUTTON )
			{
				c_send_event( pw, C_EVENT_DIALOG_OK, 0 );
			}
		}
	}
	
	if ( msg->message == WM_MOUSEWHEEL )
	{
		int *pos;
		pos = (int *)malloc( sizeof( int ) * 3 );
		pos[0] = LOWORD(msg->lParam);
		pos[1] = HIWORD(msg->lParam);
		pos[2] = GET_WHEEL_DELTA_WPARAM(msg->wParam);
		
		c_send_event( w, C_EVENT_MOUSE_WHEEL, pos );
		ret = 0;
	}
	
	if ( ((CWindowWidgetInfo *)pw->info)->clientwin != 0 && TranslateMDISysAccel(((CWindowWidgetInfo *)pw->info)->clientwin, msg ) != 0 )
		return 1;
	
	return ret;
}

CWidget *c_find_window_menubar( CWidget *w )
{
	CWidget *c;
	
	for ( c = w->child_head; c != 0; c = c->next ) {
		if ( c->info->type == CLARO_WIDGET_MENUBAR )
			return c;
	}
	
	return 0;
}

CWidget *c_find_window_toolbar( CWidget *w )
{
	CWidget *c;
	
	for ( c = w->child_head; c != 0; c = c->next ) {
		if ( c->info->type == CLARO_WIDGET_TOOLBAR )
			return c;
	}
	
	return 0;
}

LRESULT CALLBACK c_win32_intercept_proc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
	CWidget *cw;
	MSG m;
	
	cw = c_get_window_by_handle( c_application, hWnd, 0 );
	
	if ( cw == 0 || cw->info->real_proc == 0 )
	{
		// it's actually okay, it just means the widget has been closed and Windows is slow :)
		// printf( "OW! Intercepted a message and we can't find the window/proc: BAD\n" );
		return 1;
	}
	
	m.message = uMsg;
	m.wParam = wParam;
	m.lParam = lParam;
	
	if ( cw != 0 )
		c_win32_check_special_msg( cw, &m );
	
	if ( ( ( cw->info->type == CLARO_WIDGET_GROUPBOX || cw->info->type == CLARO_WIDGET_CHECKBOX ) && uMsg == WM_COMMAND ) ||
		 uMsg == WM_CTLCOLORSTATIC || uMsg == WM_CTLCOLORBTN || uMsg == WM_ERASEBKGND )
	{
		return c_win32_proc( hWnd, uMsg, wParam, lParam );
	}
	
	if ( uMsg == WM_KEYDOWN )
	{
		// does widget want to receive keypress events?
		if ( cw->info->flags & C_WANT_KEYPRESS )
		{
			// yes, it does. send it the event.
			int key = 0;
			
			key = wParam;
			
			if ( c_send_event_now( cw, C_EVENT_KEY_PRESS, &key ) == 1 )
				return 1;
		}
	}
	
	return CallWindowProc( cw->info->real_proc, hWnd, uMsg, wParam, lParam );
}

extern CWidget *app_topmost;
extern CMenuItem **menubar_item_lookup;
CWidget *menuw = 0;

void c_window_border_size( CWidget *w, int *w_t, int *h_t, int *w_f, int *h_f, int *h_c );

void c_win32_reset_info( CWidget *w )
{
	RECT r;
	int osx, osy, osc, tw, th;
	
	osx = osy = osc = 0;
	
	if ( w->info->type == CLARO_WIDGET_WINDOW )
		c_window_border_size( w, &tw, &th, &osx, &osy, &osc );
	/*
	GetClientRect( w->info->widget, &r );
	
	w->info->width = r.right - r.left;
	w->info->height = r.bottom - r.top;
	*/
	GetWindowRect( w->info->widget, &r );
	
	w->info->width = r.right - r.left;
	w->info->height = r.bottom - r.top;
	
	if ( w->info->type == CLARO_WIDGET_WINDOW )
	{
		w->info->width -= tw;
		w->info->height -= th;
	}
	
	if ( w->info->type != CLARO_WIDGET_WINDOW )
	{
		CWidget *wp = c_find_nonaligner_parent( w );
		
		c_win32_reset_info( wp );
		
		r.left -= wp->info->x;
		r.right -= wp->info->x;
		r.top -= wp->info->y;
		r.bottom -= wp->info->y;
	}
	
	w->info->x = r.left + osx;
	w->info->y = r.top + osy + osc;
	
	if ( w->info->type == CLARO_WIDGET_WINDOW && w->info->flags & C_WINDOW_HAS_MENUBAR )
	{
		int mh = GetSystemMetrics( SM_CYMENU );
		w->info->y += mh;
		w->info->height -= mh;
	}
}

LRESULT CALLBACK c_win32_proc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
	CWidget *cw, *ow, *cwp, *curr;
	char *ct;
	int a, b, c, y;
	int *pos;
	LPRECT r;
	HWND mdi_client;
	int flags;
	SCROLLINFO si;
	RECT clientr, statusr, toolr;
	LPMEASUREITEMSTRUCT measure;
	DRAWITEMSTRUCT *draws;
	LPNMHDR hdr;
	CMenuItem *mi;
	//CListBoxItem *lbitem, *lbcurr;
	//ClaroTableRow *tblrow;
	//ClaroTableCell *tblcell;
	CDropDownItem *cbitem, *cbcurr;
	CSysTrayIconWidgetInfo *stwi;
	CWidget *csw;
	POINT pt;
	//HDC dc;
	//HDC dc;
	
	ow = cw = c_get_window_by_handle( c_application, hWnd, 0 );
	
	if ( cw == 0 )
	{
		return DefWindowProc( hWnd, uMsg, wParam, lParam );
	}
	
	flags = cw->info->flags;
	
	if ( flags & C_MDIPARENT )
	{
		mdi_client = (HWND)((CWindowWidgetInfo *)cw->info)->clientwin;
	}
	
	switch ( uMsg )
	{
		case WM_QUIT:
			return 1;
		case WM_CLOSE:
			if ( cw->info->type == CLARO_WIDGET_WINDOW && app_topmost != 0 && cw == app_topmost )
			{
				for ( curr = c_application->child_head; curr != 0; curr = curr->next )
				{
					c_widget_enable( curr );
				}
			}
			
			if ( glob_mdi_client != 0 && cw->info->type == CLARO_WIDGET_WINDOW && cw->info->flags & C_MDICHILD )
			{
				SendMessage( glob_mdi_client, WM_MDIDESTROY, (WPARAM)hWnd, 0 );
			}

			c_destroy_widget( cw, 1 );
			
			DestroyWindow( hWnd );
			return 0;
		case WM_MOVE:
			/*cw->info->x = ((int)(short)LOWORD(lParam)) + osx;
			cw->info->y = ((int)(short)HIWORD(lParam)) + osy + osc;*/
			c_win32_reset_info( cw );
			
			c_send_event_now( cw, C_EVENT_MOVE, 0 );
			
			if ( cw->info->flags & C_MDICHILD )
				return DefMDIChildProc( hWnd, uMsg, wParam, lParam );
				
			return 1;
		case WM_INITMENUPOPUP:
			// FIXME: allow multiple menus?
			//menuw = c_find_window_menubar( cw );
			
			if ( menuw == 0 )
			{
				return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
			}
			return 1;
		case WM_MEASUREITEM:
			measure = (LPMEASUREITEMSTRUCT)lParam;
			
			if ( measure->CtlType == ODT_MENU )
			{
				measure->itemWidth = 16;
				measure->itemHeight = 16;
				return 1;
			}
			
			return 0;
		case WM_DRAWITEM:
			if ( wParam == 0 )
			{
				draws = (DRAWITEMSTRUCT *)lParam;
				if ( draws->CtlType == ODT_MENU )
				{
					if ( cw->info->type != CLARO_WIDGET_WINDOW )
					{
						MessageBox( 0, "CRASHED IN WIN PROC ON NON-WINDOW WM_DRAWITEM!", 0, 0 );
						exit( 0 );
					}
					
					// find which menu contains this menuid
					mi = 0;
					for ( curr = cw->child_head; curr != 0; curr = curr->next )
					{
						if ( curr->info->type != CLARO_WIDGET_MENUBAR )
							continue;
						
						//mi = c_recurse_get_menuitem( &((CMenuBarWidgetInfo *)menuw->info)->menubar, draws->itemID );
						mi = c_recurse_get_menuitem( &((CMenuBarWidgetInfo *)curr->info)->menubar, draws->itemID );
						
						if ( mi != 0 )
							break;
					}
					
					if ( mi != 0 )
						DrawIconEx( draws->hDC, 8, draws->rcItem.top, mi->icon->icon, draws->rcItem.right-draws->rcItem.left, draws->rcItem.bottom-draws->rcItem.top, 0, NULL, DI_NORMAL );
				}
			}
			return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
		case WM_PASTE:
			MessageBox( 0, 0, 0, 0 );
			return 1;
		case WM_SIZING:
			r = (LPRECT)lParam;
			
			a = ((CWindowWidgetInfo *)cw->info)->minsize_x;
			if ( r->right - r->left - C_W32_TOTALXOFFSET < a )
				r->right = r->left + a + C_W32_TOTALXOFFSET;
			
			a = ((CWindowWidgetInfo *)cw->info)->maxsize_x;
			if ( r->right - r->left - C_W32_TOTALXOFFSET > a )
				r->right = r->left + a + C_W32_TOTALXOFFSET;
				
			a = ((CWindowWidgetInfo *)cw->info)->minsize_y;
			if ( r->bottom - r->top - C_W32_TOTALYOFFSET < a )
			{
				ShowWindow( hWnd, SW_SHOWNORMAL );
				r->bottom = r->top + a + C_W32_TOTALYOFFSET;
			}
			
			a = ((CWindowWidgetInfo *)cw->info)->maxsize_y;
			if ( r->bottom - r->top - C_W32_TOTALYOFFSET > a )
			{
				ShowWindow( hWnd, SW_SHOWNORMAL );
				r->bottom = r->top + a + C_W32_TOTALYOFFSET;
			}
			
			/*
			cw->info->x = r->left;
			cw->info->y = r->top;
			cw->info->width = r->right - r->left;
			cw->info->height = r->bottom - r->top;
			*/
			c_win32_reset_info( cw );
			
			for ( curr = cw->child_head; curr != 0; curr = curr->next )
			{
				c_send_event_now( curr, C_EVENT_PARENTSIZE, 0 );
			}
			
			return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
		case WM_PAINT:
			if ( cw->info->type == CLARO_WIDGET_CANVAS )
				c_send_event_now( cw, C_EVENT_PREDRAW, 0 ); //c_send_event_singular( cw, C_EVENT_PREDRAW, 0 );
			else
				c_send_event_singular( cw, C_EVENT_DRAW, 0 );
			return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
		case WM_SIZE:
			/*cw->info->width = (int)(short)LOWORD(lParam);//-(GetSystemMetrics( SM_CXBORDER )*2);
			cw->info->height = (int)(short)HIWORD(lParam);//-(GetSystemMetrics( SM_CYBORDER )*2);
			*/
			
			c_win32_reset_info( cw );
			//c_send_event( cw, C_EVENT_UPDATE, 0 );
			
			if ( cw->info->type == CLARO_WIDGET_WINDOW )
			{
				/*
				GetWindowRect( cw->info->widget, &clientr );
				
				cw->info->width = clientr.right;
				cw->info->height = clientr.bottom;
				*/
				c_win32_reset_info( cw );
				
				GetClientRect( cw->info->widget, &clientr );
				
				if ( ((CWindowWidgetInfo *)cw->info)->dock_pos == 0 )
				{
					if ( cw->info->flags & C_WINDOW_HAS_STATUS )
						SendMessage( (HWND)((CWindowWidgetInfo *)cw->info)->statusbar, WM_SIZE, 0, 0 );
					if ( ((CWindowWidgetInfo *)cw->info)->rebar != 0 )
						SendMessage( ((CWindowWidgetInfo *)cw->info)->rebar, WM_SIZE, 0, 0 );
					
					memset( &statusr, 0, sizeof( RECT ) );
					if ( cw->info->flags & C_WINDOW_HAS_STATUS )
					{
						if ( GetWindowRect( (HWND)((CWindowWidgetInfo *)cw->info)->statusbar, &statusr ) == 0 )
						{
							printf( "ERROR GETTING WINDOW RECT FOR STATUS %p: %d!\n", (HWND)((CWindowWidgetInfo *)cw->info)->statusbar, (int)GetLastError( ) );
							exit( 0 );
						}
					}
					
					memset( &toolr, 0, sizeof( RECT ) );
					if ( ((CWindowWidgetInfo *)cw->info)->rebar != 0 )
					{
						if ( GetWindowRect( (HWND)((CWindowWidgetInfo *)cw->info)->rebar, &toolr ) == 0 )
						{
							printf( "ERROR GETTING WINDOW RECT FOR REBAR %p: %d!\n", ((CWindowWidgetInfo *)cw->info)->rebar, (int)GetLastError( ) );
							exit( 0 );
						}
					}
					
					cw->info->cspace.y = ( toolr.bottom - toolr.top );
					cw->info->cspace.x = 0;
					cw->info->cspace.w = clientr.right;
					cw->info->cspace.h = clientr.bottom - ( statusr.bottom - statusr.top ) - ( toolr.bottom - toolr.top );
				}
				else
				{
					cw->info->cspace.y = 0;
					cw->info->cspace.x = 0;
					cw->info->cspace.w = clientr.right;
					cw->info->cspace.h = clientr.bottom;
				}
			}
			
			if ( wParam == SIZE_MAXIMIZED )
				c_send_event( cw, C_EVENT_MAXIMIZED, 0 );
			else if ( wParam == SIZE_MINIMIZED )
				c_send_event( cw, C_EVENT_MINIMIZED, 0 );
			else if ( wParam == SIZE_RESTORED )
				c_send_event( cw, C_EVENT_RESTORED, 0 );
			
			c_send_event( cw, C_EVENT_RESIZE, 0 );
			
			for ( curr = cw->child_head; curr != 0; curr = curr->next )
			{
				c_send_event_now( curr, C_EVENT_PARENTSIZE, 0 );
			}
			
			if ( cw->info->flags & C_MDICHILD )
				return DefMDIChildProc( hWnd, uMsg, wParam, lParam );
			
			return 0;//c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
		case WM_CTLCOLORSTATIC:
		case WM_CTLCOLORBTN:
		case WM_CTLCOLORDLG:
			SetBkMode( (HDC)wParam, TRANSPARENT );
			///// FIXME: get NULL_BRUSH working :(     // FIXME: (NULL_BRUSH) when text changes in a STATIC control it doesn't get cleared! Bleh.
			return (int)(HBRUSH)CreateSolidBrush( RGB( (C_NATIVE_BACKGROUND >> 24) & 0xFF, (C_NATIVE_BACKGROUND >> 16) & 0xFF, (C_NATIVE_BACKGROUND >> 8) & 0xFF ) );
			//GetStockObject( NULL_BRUSH );//HOLLOW_BRUSH);CreateSolidBrush( RGB( 255,0,0 ) );//
		case WM_MOUSEMOVE:
			pos = (int *)malloc( sizeof( int ) * 2 );
			pos[0] = LOWORD(lParam);
			pos[1] = HIWORD(lParam);
			c_send_event( cw, C_EVENT_MOUSE_MOVE, pos );
			
			// will this work fine here? hmm.
			TRACKMOUSEEVENT tme;
			tme.cbSize = sizeof( TRACKMOUSEEVENT );
			tme.dwFlags = TME_LEAVE;
			tme.hwndTrack = hWnd;
			tme.dwHoverTime = 0;
			TrackMouseEvent( &tme );
			
			return 0;
		case WM_MOUSELEAVE:
			c_send_event( cw, C_EVENT_MOUSE_LEAVE, 0 );
			return 0;
		case WM_LBUTTONDBLCLK:
		case WM_LBUTTONDOWN:
		case WM_LBUTTONUP:
			pos = (int *)malloc( sizeof( int ) * 2 );
			pos[0] = LOWORD(lParam);
			pos[1] = HIWORD(lParam);
			c_send_event( cw, ( uMsg == WM_LBUTTONUP ? C_EVENT_MOUSE_LEFT_RELEASE : ( uMsg == WM_LBUTTONDBLCLK ? C_EVENT_MOUSE_LEFT_DBLCLK : C_EVENT_MOUSE_LEFT_CLICK ) ), pos );
			return 1;
		case WM_RBUTTONDBLCLK:
		case WM_RBUTTONDOWN:
		case WM_RBUTTONUP:
			pos = (int *)malloc( sizeof( int ) * 2 );
			pos[0] = LOWORD(lParam);
			pos[1] = HIWORD(lParam);
			c_send_event( cw, ( uMsg == WM_RBUTTONUP ? C_EVENT_MOUSE_RIGHT_RELEASE : ( uMsg == WM_RBUTTONDBLCLK ? C_EVENT_MOUSE_RIGHT_DBLCLK : C_EVENT_MOUSE_RIGHT_CLICK ) ), pos );
			return 1;
		case WM_MBUTTONDBLCLK:
		case WM_MBUTTONDOWN:
		case WM_MBUTTONUP:
			pos = (int *)malloc( sizeof( int ) * 2 );
			pos[0] = LOWORD(lParam);
			pos[1] = HIWORD(lParam);
			c_send_event( cw, ( uMsg == WM_MBUTTONUP ? C_EVENT_MOUSE_MIDDLE_RELEASE : ( uMsg == WM_MBUTTONDBLCLK ? C_EVENT_MOUSE_MIDDLE_DBLCLK : C_EVENT_MOUSE_MIDDLE_CLICK ) ), pos );
			return 1;
		case WM_SETFOCUS:
			if ( cw->info->type == CLARO_WIDGET_WINDOW && app_topmost != 0 && cw != app_topmost )
			{
				// there is a topmost window, and this isn't it! focus, focus!
				c_widget_focus( app_topmost );
			}
			c_send_event( cw, C_EVENT_ONFOCUS, 0 );
			
			return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
		case WM_VSCROLL:
			si.cbSize = sizeof( si );
			si.fMask  = SIF_ALL;
			GetScrollInfo( hWnd, SB_VERT, &si );
			y = si.nPos;
			
			switch ( LOWORD( wParam ) ) {
				case SB_TOP:
					si.nPos = si.nMin;
					break;
				case SB_BOTTOM:
					si.nPos = si.nMax;
					break;
				case SB_LINEUP:
					si.nPos -= 1;
					break;
				case SB_LINEDOWN:
					si.nPos += 1;
					break;
				case SB_PAGEUP:
					si.nPos -= si.nPage;
					break;
				case SB_PAGEDOWN:
					si.nPos += si.nPage;
					break;
				case SB_THUMBTRACK:
					si.nPos = si.nTrackPos;
					break;
				default:
					break; 
			}
		
			si.fMask = SIF_POS;
			SetScrollInfo( hWnd, SB_VERT, &si, true );
			si.fMask  = SIF_ALL;
			GetScrollInfo( hWnd, SB_VERT, &si );
			
			// use the "live" position
			cw->info->sci.nTrackPos = cw->info->sci.nPos = si.nPos;
			
			if ( si.nPos != y ) {
				UpdateWindow( hWnd );
			}
			
			//c_send_event_singular( cw, C_EVENT_PREDRAW, 0 );
			c_canvas_invalid( cw );
			c_send_event_now( cw, C_EVENT_PREDRAW, 0 );
			
			return 0;
		case WM_NOTIFY:
			hdr = (LPNMHDR)lParam;
			
			if ( hdr->code == TTN_GETDISPINFO )
			{
				LPNMTTDISPINFO ttdi = (LPNMTTDISPINFO)lParam;
				
				CToolItem *citem;
				
				cw = c_find_window_toolbar( cw );
				
				if ( cw != 0 )
				{
					for ( citem = ((CToolBarWidgetInfo *)cw->info)->items; citem != 0; citem = citem->next )
					{
						if ( citem->id == ttdi->hdr.idFrom )
						{
							ttdi->lpszText = (LPTSTR)&citem->tooltip;
							//strcpy( ttdi->szText, citem->tooltip );
						}
					}
				}
			}
			else if ( hdr->code == LVN_GETDISPINFO )
			{
				CWidget *lw = c_get_window_by_handle( cw, hdr->hwndFrom, 0 );
				CListViewWidgetInfo *lvi = (CListViewWidgetInfo *)lw->info;
				LPNMLVDISPINFO lvdi = (LPNMLVDISPINFO)lParam;
				LVITEM *litem = (LVITEM *)&lvdi->item;
				ClaroTable *tbl = lvi->table;
				ClaroTableCell *cell;
				
				if ( lw != 0 )
				{
					int aa;
					
					for ( aa = 0; aa < lvi->col_num; aa++ )
					{
						if ( lvi->columns[aa].table_cell == litem->iSubItem )
						{
							cell = c_tbl_get_cell( tbl, litem->iItem, lvi->columns[aa].table_cell );
							if ( cell == 0 )
								break;
							//printf( "(%d,%d) %s\n", litem->iItem, litem->iSubItem, cell->data );
							litem->pszText = cell->data;
						}
					}
				}
			}
			else if ( hdr->code == NM_CLICK )
			{
				CWidget *lw = c_get_window_by_handle( cw, hdr->hwndFrom, 0 );
				
				if ( lw->info->type == CLARO_WIDGET_LISTVIEW )
				{
					((CListViewWidgetInfo *)lw->info)->selected = SendMessage( lw->info->widget, LVM_GETHOTITEM, 0, 0 );
					
					printf( "%d\n", ((CListViewWidgetInfo *)lw->info)->selected );
					
					c_send_event( lw, C_EVENT_ITEM_SELECTED, 0 );
				}
			}
			
			return 0;
		case C_WM_SYSTRAYICON_ACTION:
			// find the widget for this..
			csw = 0;
			
			for ( cwp = cw->child_head; cwp != 0; cwp = cwp->next )
			{
				if ( cwp->info->type != CLARO_WIDGET_SYSTRAYICON )
					continue;
				
				stwi = (CSysTrayIconWidgetInfo *)cwp->info;
				
				if ( stwi->id == wParam )
					csw = cwp;
			}
			
			if ( csw == 0 )
				return 0;
			
			pos = (int *)malloc( sizeof( int ) * 2 );
			/*dc = GetDC( 0 );
			GetCurrentPositionEx( dc, &pt );
			printf( "%d,%d\n", pt.x, pt.y );
			ReleaseDC( 0, dc );*/
			GetCursorPos( &pt );
			pos[0] = pt.x;
			pos[1] = pt.y;
			
			switch ( LOWORD( lParam ) ) {
				case WM_LBUTTONDBLCLK:
				case WM_LBUTTONDOWN:
				case WM_LBUTTONUP:
					c_send_event( csw, ( LOWORD( lParam ) == WM_LBUTTONUP ? C_EVENT_MOUSE_LEFT_RELEASE : ( LOWORD( lParam ) == WM_LBUTTONDBLCLK ? C_EVENT_MOUSE_LEFT_DBLCLK : C_EVENT_MOUSE_LEFT_CLICK ) ), pos );
					return 1;
				case WM_RBUTTONDBLCLK:
				case WM_RBUTTONDOWN:
				case WM_RBUTTONUP:
					c_send_event( csw, ( LOWORD( lParam ) == WM_RBUTTONUP ? C_EVENT_MOUSE_RIGHT_RELEASE : ( LOWORD( lParam ) == WM_RBUTTONDBLCLK ? C_EVENT_MOUSE_RIGHT_DBLCLK : C_EVENT_MOUSE_RIGHT_CLICK ) ), pos );
					return 1;
			}
			
			free( pos );
			
			return 0;
		case WM_COMMAND:
			cwp = cw;
			cw = 0;
			if ( lParam != 0 )
				cw = c_get_window_by_handle( c_application, (HWND)lParam, 0 );
			
			if ( cw == 0 )
			{
				// assume menubar
				//cw = c_find_window_menubar( ow );
				cw = 0;
				
				mi = 0;
				for ( curr = cwp->child_head; curr != 0; curr = curr->next )
				{
					if ( curr->info->type != CLARO_WIDGET_MENUBAR )
						continue;
					
					//mi = c_recurse_get_menuitem( &((CMenuBarWidgetInfo *)menuw->info)->menubar, draws->itemID );
					mi = c_recurse_get_menuitem( &((CMenuBarWidgetInfo *)curr->info)->menubar, LOWORD( wParam ) );
					
					if ( mi != 0 )
					{
						cw = curr;
						break;
					}
				}
				
				if( LOWORD( wParam ) == SC_CLOSE || LOWORD( wParam ) == SC_MINIMIZE || LOWORD( wParam ) == SC_RESTORE )
				{
					// I don't really know if this is the right way to do this :-\ Oh well!
					return DefFrameProc( hWnd, glob_mdi_client, uMsg, wParam, lParam );
				}
				
				if ( cw == 0 )
					return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
			}
			
			switch ( HIWORD( wParam ) )
			{
				case BN_CLICKED:
					if ( cw->info->type == CLARO_WIDGET_BUTTON )
						c_send_event( cw, C_EVENT_BUTTON_PRESS, 0 );
					else if ( cw->info->type == CLARO_WIDGET_RADIOBUTTON )
					{
						// Yes. That's right. I didn't like the way Windows wanted
						//  to do everything it's own way, so we'll do radio buttons
						//  by HAND.. *winge, winge, winge*
						
						cwp = cw->parent;
						
						for ( curr = cwp->child_head; curr != 0; curr = curr->next )
						{
							if ( curr != cw )
								SendMessage( curr->info->widget, BM_SETCHECK, BST_UNCHECKED, 0 );
						}
						
						SendMessage( cw->info->widget, BM_SETCHECK, BST_CHECKED, 0 );
						
						((CRadioGroupWidgetInfo *)cwp->info)->value = ((CRadioButtonWidgetInfo *)cw->info)->val;
						
						c_send_event( cwp, C_EVENT_RADIO_CHANGE, 0 );
					}
					else if ( cw->info->type == CLARO_WIDGET_CHECKBOX )
					{
						((CCheckBoxWidgetInfo *)cw->info)->checked = !((CCheckBoxWidgetInfo *)cw->info)->checked;
						SendMessage( cw->info->widget, BM_SETCHECK, (((CCheckBoxWidgetInfo *)cw->info)->checked==1?BST_CHECKED:BST_UNCHECKED), 0 );
						
						c_send_event( cw, C_EVENT_BUTTON_PRESS, 0 );
					}
					else if ( cw->info->type == CLARO_WIDGET_MENUBAR )
					{
						c_recurse_check_menu_onclick( cw, &((CMenuBarWidgetInfo *)cw->info)->menubar, (int)LOWORD( wParam ) );
						return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
					}
					else if ( cw->info->type == CLARO_WIDGET_TOOLBAR )
					{
						CToolItem *citem;
						
						for ( citem = ((CToolBarWidgetInfo *)cw->info)->items; citem != 0; citem = citem->next )
						{
							if ( citem->id == (int)LOWORD( wParam ) )
								(*citem->onclick)( citem );
						}
						
						return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
					}
					else
						printf( "Warning: BN_CLICKED message recieved for widget (type=%d) that's not known to the win proc. This is probably dangerous!\n", cw->info->type );
					
					return 1;
				case CBN_SELENDOK:
					if ( cw->info->type == CLARO_WIDGET_DROPDOWN )
					{
						cbitem = 0;
						
						a = SendMessage( cw->info->widget, CB_GETCURSEL, 0, 0 );
						a = SendMessage( cw->info->widget, CB_GETITEMDATA, a, 0);
						
						for ( cbcurr = ((CDropDownWidgetInfo *)cw->info)->items; cbcurr != 0; cbcurr = cbcurr->next )
						{
							if ( cbcurr->id == a )
								cbitem = cbcurr;
						}
						
						((CDropDownWidgetInfo *)cw->info)->selected = cbitem;
						
						c_send_event( cw, C_EVENT_ITEM_SELECTED, 0 );
						
						UpdateWindow( cw->info->widget );
					}
					return 1;
				case LBN_SELCHANGE:
					if ( cw->info->type == CLARO_WIDGET_LISTBOX )
					{
						ClaroTable *ctable = ((CListBoxWidgetInfo *)cw->info)->table;
						
						a = SendMessage( cw->info->widget, LB_GETCURSEL, 0, 0 );
						a = SendMessage( cw->info->widget, LB_GETITEMDATA, a, 0);
						
						c = 0;
						for ( b = 0; b < ctable->rows; b++ )
						{
							if ( (ClaroTableRow *)a == ctable->lookup[b] )
								c = 1;
						}
						
						if ( c == 0 )
							a = 0;
						
						((CListBoxWidgetInfo *)cw->info)->selected = (ClaroTableRow *)a;
						
						c_send_event( cw, C_EVENT_ITEM_SELECTED, 0 );
					}
					return 1;
				case EN_CHANGE:
					if ( cw->info->type == CLARO_WIDGET_TEXTBOX )
					{
						ct = ((CTextBoxWidgetInfo *)cw->info)->text;
						SendMessage( cw->info->widget, WM_GETTEXT, CLARO_TEXTBOX_MAXIMUM, (LPARAM)ct );
						c_send_event( cw, C_EVENT_TEXT_CHANGED, 0 );
					}
					return 1;
				default:
					return DefFrameProc( hWnd, glob_mdi_client, uMsg, wParam, lParam );
			}
			return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
	}
	
	return c_default_win32_proc( cw, hWnd, uMsg, wParam, lParam );
}
