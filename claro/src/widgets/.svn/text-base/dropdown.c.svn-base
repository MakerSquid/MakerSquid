/*************************************************************************
$Id$

Claro - A cross platform GUI toolkit which "makes sense".
Copyright (C) 2004 Theo Julienne and Gian Perrone

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

#include "../../include/includes.h"

int c_dropdown_selected( CWidget *w )
{
	if ( ((CDropDownWidgetInfo *)w->info)->selected == 0 )
		return -1;
	
	return ((CDropDownWidgetInfo *)w->info)->selected->id;
}

void c_dropdown_select_item( CWidget *w, int item )
{
	CDropDownItem *cbcurr, *cbitem;
	
#ifdef ENV_WIN32
	if ( w->info->widget != 0 )
	{
		cbitem = 0;
		
		for ( cbcurr = ((CDropDownWidgetInfo *)w->info)->items; cbcurr != 0; cbcurr = cbcurr->next )
		{
			if ( cbcurr->id == item )
				cbitem = cbcurr;
		}
		
		((CDropDownWidgetInfo *)w->info)->selected = cbitem;
		
		if ( cbitem != 0 )
		{
			SendMessage( w->info->widget, CB_SETCURSEL, cbitem->winid, 0 );
		}
		
		c_send_event( w, C_EVENT_ITEM_SELECTED, 0 );
	}
	else
		((CDropDownWidgetInfo *)w->info)->selitemid = item;
#endif
}

void c_dropdown_clear( CWidget *w )
{
	CDropDownItem *curr, *next;
	
	for ( curr = ((CDropDownWidgetInfo *)w->info)->items; curr != NULL; curr = next )
	{
		next = curr->next;
		
		free( curr->text );
		free( curr );
	}
	
	((CDropDownWidgetInfo *)w->info)->items = 0;
	
#ifdef ENV_WIN32
	if ( w->info->widget != 0 )
		SendMessage( w->info->widget, CB_RESETCONTENT, 0, 0 );
#endif
}

int c_dropdown_additem( CWidget *w, char *text )
{
	CDropDownItem *item;
	
	if ( !( item = (CDropDownItem *)malloc( sizeof( CDropDownItem ) ) ) )
		return -1;
	
	item->id = ((CDropDownWidgetInfo *)w->info)->count;
	item->text = (char *)malloc( strlen( text ) + 1 );
	strcpy( item->text, text );
	item->next = 0;
	
	((CDropDownWidgetInfo *)w->info)->count++;
	
	if ( ((CDropDownWidgetInfo *)w->info)->items == 0 )
		((CDropDownWidgetInfo *)w->info)->items = item;
	else
		((CDropDownWidgetInfo *)w->info)->icurr->next = item;
	
	((CDropDownWidgetInfo *)w->info)->icurr = item;
	
#ifdef ENV_WIN32
	if ( w->info->widget != 0 )
	{
		item->winid = SendMessage( w->info->widget, CB_ADDSTRING, 0, (LPARAM)item->text );
		SendMessage( w->info->widget, CB_SETITEMDATA, item->winid, (LPARAM)item->id ); 
	}
#endif
	
	return item->id;
}

void c_dropdown_delitem( CWidget *w, int item )
{
	CDropDownItem *curr, *curr2, *prev;
	
	prev = 0;
	
	for ( curr = ((CDropDownWidgetInfo *)w->info)->items; curr != NULL; curr = curr->next )
	{
		if ( curr->id == item )
		{
#ifdef ENV_WIN32
			if ( w->info->widget != 0 )
				SendMessage( w->info->widget, CB_DELETESTRING, curr->winid, 0 );
#endif
			
			if ( curr->next == 0 )
				((CDropDownWidgetInfo *)w->info)->icurr = prev;
			
			if ( prev == 0 )
				((CDropDownWidgetInfo *)w->info)->items = curr->next;
			else
				prev->next = curr->next;
			
#ifdef ENV_WIN32
			for ( curr2 = ((CDropDownWidgetInfo *)w->info)->items; curr2 != NULL; curr2 = curr2->next )
			{
				if ( curr2->winid > curr->winid )
					curr2->winid--;
			}
#endif

			free( curr->text );
			free( curr );
			return;
		}
		prev = curr;
	}
	
#ifdef ENV_WIN32
	RedrawWindow( w->info->widget, 0, 0, RDW_UPDATENOW );
#endif
}

void c_dropdown_handle_create( CEvent *e, void *data )
{
	CDropDownWidgetInfo *bwi = (CDropDownWidgetInfo *)e->caller->info;

#ifdef ENV_GTK
	#warning "No GTK port for c_dropdown coded"
#endif

#ifdef ENV_WIN32
	HWND hwnd;
	HWND hwnd_parent = e->caller->parent->info->widget;
	int flags = e->caller->info->flags;
	CDropDownItem *curr;

	if ( !( hwnd = CreateWindowEx( ( flags & C_BORDER_NONE ? 0 : WS_EX_CLIENTEDGE ), "COMBOBOX", 
	                               "",
	                               WS_CHILD | CBS_DROPDOWNLIST | WS_TABSTOP | WS_VSCROLL,
	                               bwi->info.x, bwi->info.y,
	                               bwi->info.width, bwi->info.height,
	                               hwnd_parent,
	                               NULL, (HINSTANCE) GetModuleHandle( NULL ), NULL ) ) )
		MessageBox( 0, "Could not create dropdown HWND.", "Claro error", 0 );
	
	e->caller->info->widget = hwnd;
	
	c_font_fix( e->caller );

	for ( curr = ((CDropDownWidgetInfo *)e->caller->info)->items; curr != NULL; curr = curr->next )
	{
		curr->winid = SendMessage( hwnd, CB_ADDSTRING, 0, (LPARAM)curr->text );
		SendMessage( hwnd, CB_SETITEMDATA, curr->winid, (LPARAM)curr->id ); 
	}
	
	ShowWindow( hwnd, SW_SHOW );
	UpdateWindow( hwnd );
	
	c_widget_update_enable( e->caller );
	c_widget_fix_focus( e->caller );
	
	c_send_event( e->caller, C_EVENT_UPDATE, 0 );
#endif

	if ( ((CDropDownWidgetInfo *)e->caller->info)->selitemid != -1 )
		c_dropdown_select_item( e->caller, ((CDropDownWidgetInfo *)e->caller->info)->selitemid );

	printf("c_dropdown_handle_create( )\n");
}

void c_dropdown_handle_update( CEvent *e, void *data )
{
	//CDropDownWidgetInfo *bwi = (CDropDownWidgetInfo *)e->caller->info;

	printf( "c_dropdown_handle_update( )\n" );
	
	c_send_event( e->caller, C_EVENT_DRAW, 0 );
}

CWidget *c_new_dropdown( CWidget *parent, int x, int y, int width, int height, int flags )
{
	CWidget *w;
	
	if ( parent == 0 )
		parent = c_application;
	
	w = c_clone_widget( 0, parent );
	
	c_init_widget_info( w, sizeof( CDropDownWidgetInfo ) );
	
	w->info->type = CLARO_WIDGET_DROPDOWN;
	w->info->x = x;
	w->info->y = y;
	w->info->width = width;
	w->info->height = height;
	w->info->flags = flags;
	w->info->visible = 1;
	
	((CDropDownWidgetInfo *)w->info)->selitemid = -1;
	
	// add event handler
	c_new_event_handler( w, C_EVENT_CREATE, c_dropdown_handle_create );
	c_new_event_handler( w, C_EVENT_UPDATE, c_dropdown_handle_update );
	
	// actually SEND the create event
	c_send_event( w, C_EVENT_CREATE, 0 );
	
	return w;
}
