/*************************************************************************
$Id$

Claro - A cross platform GUI toolkit which "makes sense".
Copyright (C) 2004 Theo Julienne and Gian Perrone

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

#include "../../include/includes.h"

void c_aligner_set_stretchable_child( CWidget *me, CWidget *child )
{
	((CAlignerWidgetInfo *)me->info)->stretchchild = child;
}

void c_aligner_handle_create( CEvent *e, void *data )
{
	e->caller->info->widget = e->caller->parent->info->widget;
	
	c_send_event( e->caller, C_EVENT_PARENTSIZE, 0 );
	
	printf("c_aligner_handle_create( )\n");
}

void c_aligner_parent_size( CEvent *e, void *data )
{
	CWidget *w = e->caller;
	CWidget *curr;
	CWidget *stretch = ((CAlignerWidgetInfo *)w->info)->stretchchild;
	int snum = -1;
	int total, totalother;
	int *sizes;
	int numchild;
	int pos;
	int a;
	
	int myspacex, myspacey, myspacew, myspaceh;
	
	if (  w->parent->info->type == CLARO_WIDGET_ALIGNER )
	{
		myspacex = w->info->x;
		myspacey = w->info->y;
		myspacew = w->info->width;
		myspaceh = w->info->height;
	}
	else
	{
		myspacex = w->parent->info->cspace.x;
		myspacey = w->parent->info->cspace.y;
		myspacew = w->parent->info->cspace.w;
		myspaceh = w->parent->info->cspace.h;
	}
	
	// update all children with new size
	
	if ( w->info->flags & C_ALIGNER_HORIZONTAL )
	{
		total = myspacew;
		totalother = myspacey + myspaceh;
	}
	else
	{
		total = myspaceh;
		totalother = myspacex + myspacew;
	}
	
	numchild = 0;
	
	for ( curr = w->child_head; curr != 0; curr = curr->next )
	{
		numchild++;
	}
	
	sizes = (int *)malloc( sizeof(int) * numchild );
	
	pos = 0;
	
	for ( curr = w->child_head, a = 0; curr != 0; curr = curr->next, a++ )
	{
		if ( curr == stretch )
		{
			snum = a;
			continue;
		}

#if defined(ENV_WIN32)
		if ( curr->info->type == CLARO_WIDGET_ALIGNER )
		{
			if ( w->info->flags & C_ALIGNER_HORIZONTAL )
				sizes[a] = curr->info->width;
			else
				sizes[a] = curr->info->height;
		}
		else
		{
			if ( w->info->flags & C_ALIGNER_HORIZONTAL )
			{
				sizes[a] = c_widget_width( curr );
			}
			else
				sizes[a] = c_widget_height( curr );
		}
#elif defined( ENV_GTK )
		if ( w->info->flags & C_ALIGNER_HORIZONTAL )
			sizes[a] = curr->info->width;
		else
			sizes[a] = curr->info->height;
#elif defined( ENV_CARBON )
		if ( w->info->flags & C_ALIGNER_HORIZONTAL )
			sizes[a] = curr->info->width;
		else
			sizes[a] = curr->info->height;
#else
		sizes[a] = 0;
#endif

		pos += sizes[a];
	}
	
	if ( snum != -1 )
	{
		// give the stretchable child the rest
		sizes[snum] = total - pos;
	}
	
	// set widget sizes
	pos = myspacey;
	if ( w->info->flags & C_ALIGNER_HORIZONTAL )
		pos = myspacex;

	for ( curr = w->child_head, a = 0; curr != 0; curr = curr->next, a++ )
	{
		if ( curr->info->type != CLARO_WIDGET_ALIGNER && curr->info->type != CLARO_WIDGET_WORKSPACE )
		{
			if ( w->info->flags & C_ALIGNER_HORIZONTAL )
				c_widget_move( curr, pos, myspacey, sizes[a], totalother );
			else
				c_widget_move( curr, myspacex, pos, totalother, sizes[a] );
		}
		else
		{
			if ( w->info->flags & C_ALIGNER_HORIZONTAL )
				c_widget_move_info( curr, pos, myspacey, sizes[a], totalother );
			else
				c_widget_move_info( curr, myspacex, pos, totalother, sizes[a] );
			
			c_send_event_now( curr, C_EVENT_PARENTSIZE, 0 );
		}
		
		pos += sizes[a];
	}
	
	if ( w->info->flags & C_ALIGNER_HORIZONTAL )
	{
		w->info->width = pos;
		w->info->height = myspaceh;
	}
	else
	{
		w->info->width = myspacew;
		w->info->height = pos;
	}
	
	free( sizes );
}

CWidget *c_new_aligner( CWidget *parent, int flags )
{
	CWidget *w;

	if ( parent == 0 )
		parent = c_application;

	w = c_clone_widget( 0, parent );

	c_init_widget_info( w, sizeof( CAlignerWidgetInfo ) );
	
	w->info->type = CLARO_WIDGET_ALIGNER;
	w->info->flags = flags;
	w->info->visible = 1;
	((CAlignerWidgetInfo *)w->info)->stretchchild = 0;
	
	// add event handlers
	c_new_event_handler( w, C_EVENT_CREATE, c_aligner_handle_create );
	c_new_event_handler( w, C_EVENT_PARENTSIZE, c_aligner_parent_size );
	
	// actually SEND the create event
	c_send_event( w, C_EVENT_CREATE, 0 );
	
	return w;
}
