/*************************************************************************
$Id$

Claro - A cross platform GUI toolkit which "makes sense".
Copyright (C) 2004 Theo Julienne and Gian Perrone

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**************************************************************************/

/* Make sure includes.h is included.
 * THIS MUST HAPPEN BEFORE THE IFDEF BELOW!
 */

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _INCLUDES_H
#include "includes.h"
#endif

#ifndef _CLARO_H
#define _CLARO_H

#ifdef ENV_WIN32
#include "win32/defs.h"
#endif

#ifdef ENV_GTK
#include "gtk/defs.h"
#endif

#ifdef ENV_CARBON
#include "osx/defs.h"
#endif

/* A prototype for CEvent, as we need it for CWidget->handlers */

typedef struct ccs
{
	int x, y;
	int w, h;
} CContainerSpace;

typedef struct {
	int type;

	CNativeWidget widget;
#ifdef ENV_WIN32
	HDC wdc;
#endif
	int flags;
	int x, y;
	int width, height;
	int visible;
	int disabled;
	int hidden;
	int initfocus;

#ifdef ENV_WIN32
	SCROLLINFO sci;
	WNDPROC real_proc;
#endif
#ifdef ENV_GTK
	GtkWidget *hscroll, *vscroll;
	GtkAdjustment *hsa, *vsa;
#endif
#ifdef ENV_CARBON
	ControlRef vscroll, hscroll;
#endif

	CContainerSpace cspace;
} CWidgetInfo;

#ifdef ENV_WIN32
LRESULT CALLBACK c_win32_intercept_proc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
#endif

typedef struct _CWidget {
	CWidgetInfo *info;
	void *handlers;
	
	int freeze_destroy;
	
	void *font;

	// this widget's parent
	struct _CWidget *parent;
	// this widget's first child
	struct _CWidget *child_head;
	// this widget's last child
	struct _CWidget *child_curr;

	// next and prev siblings
	struct _CWidget *next;
	struct _CWidget *prev;
} CWidget;

typedef struct CEvent_t {
	float priority;		/* events can be sorted into high and low priority queues based on bounds set at library compile-time */
	unsigned int id;
	void (*handler)(struct CEvent_t *, void *);	/* Setting the handler to 0 will force a handler to be looked up at handle-time.  This is not recommended.  Set the event handler at event creation, it speeds up the event loop */
	CWidget *caller;
	void *data;
	int proc_cancel;

	struct CEvent_t *next;
} CEvent;

/* Global queues */
extern CEvent *c_event_queue;

/* Declare c_application */
extern CWidget *c_application;

/* Widget functions */

CWidget		*c_create_widget		( CWidget *parent, CWidgetInfo *info );
void c_destroy_widget ( CWidget *w, int notify );
void c_close_widget ( CWidget *w );
void			c_set_parent			( CWidget *w, CWidget *p );
void 			c_add_child			( CWidget *w, CWidget *p );
void			c_remove_child		( CWidget *w, CWidget *p );
CWidget		*c_get_parent			( CWidget *w );
CWidget		*c_find_widget			( CWidget *parent, char *name );	/* FIXME: Are names suitable unique IDs?  Will this remove the need for widget-find-by-gtk_widget type deals? */

void c_widget_update_enable( CWidget *w );
void c_widget_fix_focus( CWidget *w );
#ifdef ENV_WIN32
CWidget *c_get_window_by_handle( CWidget *from, HWND win, int sect );
#endif

// moo
void c_add_mainloop( int (*func)() );

/* FIXME:  Add c_build_widget_index( CWidget *parent );  This would create a memory index which would make things faster, but naturally consume more memory.  A compile-time option could determine whether c_widget_index_lookup is just a call to c_widget_fi

nd( c_application, ... ) or whether it actually searches the index, depending on whether speed or memory usage is more important */

/* Event functions */
void c_send_event( CWidget *w, int id, void *data );
int c_send_event_now( CWidget *w, int id, void *data );
void c_send_event_singular( CWidget *w, int id, void *data );;
CEvent		*c_get_event			( CEvent *head );	/* Retrieve and remove first item in queue */
CEvent		*c_peek_event		( CEvent *head );	/* Retrieve but do not remove first item */

void c_dispatch_events( );
void c_destroy_pending( CEvent **e, CWidget *w );

/* Handler functions */
void			c_add_raw_handler		( CEvent *head, int id, void (*handler)(CEvent *, void *), void *data );
void			c_remove_raw_handler		( CEvent *head, int id );
CEvent *c_find_handler( unsigned int id, CEvent *h );

/* Init functions */
void c_init_events( CEvent **e );
void c_destroy_events( CEvent *e );

/* Macros */

#define c_add_handler(w,i,h,d) c_add_raw_handler(w->handlers,i,h,d)
#define c_remove_handler(w,i) c_remove_raw_handler(w->handlers,i)

/* Functions */
int c_init( char *name, int flags );
int c_mainloop( );
void c_cleanup( );

CWidget *c_clone_widget( CWidget *w, CWidget *p );
void c_init_widget_info( CWidget *w, int size );

CEvent *c_new_event_handler( CWidget *w, int id, void (*handler)(CEvent *, void *) );

#ifdef ENV_WIN32
extern HFONT w32_font;

// Win32-only global definitions
LRESULT CALLBACK c_win32_proc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
LRESULT CALLBACK c_edit_proc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );

// FIXME: [SHITTY] Really, this sucks :p it means only one MDI interface per application >:|
extern HWND glob_mdi_client;
#endif

#ifndef true
#define true 1
#define false 0
#endif

extern int c_running;

/* WINDOWS */

void c_window_minsize( CWidget *w, int x, int y );
void c_window_maxsize( CWidget *w, int x, int y );

/* MORE */
void c_shutdown( );
void c_progress_change( CWidget *w, float pos );

/* Convenience widgets */

#define C_WINDOW_CINFO(w) ((CWindowWidgetInfo *)w->info)

#ifdef ENV_GTK
void window_set_state(CWidget *widget);
void window_close(CWidget *widget);


#endif 

#endif

#ifdef __cplusplus
}
#endif
